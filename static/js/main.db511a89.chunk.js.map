{"version":3,"sources":["components/hangman_images/image1.jpg","components/hangman_images/image2.jpg","components/hangman_images/image3.jpg","components/hangman_images/image4.jpg","components/hangman_images/image5.jpg","components/hangman_images/image6.jpg","components/hangman_images/image7.jpg","components/Words.js","components/Hangman.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","programming_languages","randomWord","Math","floor","random","length","Hangman","props","handleGuess","e","letter","target","value","setState","st","guessed","add","mistake","answer","includes","resetButton","Set","state","this","split","map","has","className","key","onClick","disabled","toUpperCase","gameOver","maxWrong","gameStat","generateButtons","guessedWord","join","src","images","alt","Component","defaultProps","step1","step2","step3","step4","step5","step6","step7","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db511a89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.db9097e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image2.fbff4784.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image3.c4ea9528.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image4.62a781c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image5.0f8ca81e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image6.1b557aa7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image7.c80394c2.jpg\";","const programming_languages =[\n    \"python\",\n    \"javascript\",\n    \"java\",\n    \"swift\",\n    \"react\",\n    \"vue\",\n    \"cpp\",\n    \"fortran\",\n    \"kotlin\",\n    \"ruby\",\n    \"php\",\n    \"golang\",\n    \"csharp\",\n    \"sql\",\n    \"html\"\n]\n\nfunction randomWord(){\n    return programming_languages[Math.floor(Math.random()*programming_languages.length)]\n}\nexport { randomWord }","import React, {Component} from 'react';\nimport './Hangman.css';\nimport {randomWord} from './Words';\nimport step1 from './hangman_images/image1.jpg';\nimport step2 from './hangman_images/image2.jpg';\nimport step3 from './hangman_images/image3.jpg';\nimport step4 from './hangman_images/image4.jpg';\nimport step5 from './hangman_images/image5.jpg';\nimport step6 from './hangman_images/image6.jpg';\nimport step7 from './hangman_images/image7.jpg';\n\nclass Hangman extends Component {\n    static defaultProps = {\n        maxWrong: 6,\n        images: [step1, step2, step3, step4, step5, step6, step7]\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          mistake: 0,\n          guessed: new Set([]),\n          answer: randomWord()\n        }\n      }\n\n      handleGuess = e => {\n        let letter = e.target.value;\n        this.setState(st => ({\n          guessed: st.guessed.add(letter),\n          mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1)\n        }));\n      }\n    \n      guessedWord() {\n        return this.state.answer.split(\"\").map(letter => (this.state.guessed.has(letter) ? letter : \" ___ \"));\n      }\n    \n      generateButtons() {\n        return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(letter => (\n          <button\n            className=\"ui inverted button\"\n            key={letter}\n            value={letter}\n            onClick={this.handleGuess}\n            disabled={this.state.guessed.has(letter)}\n          >\n            {letter.toUpperCase()}\n          </button>\n        ));\n      }\n    \n      resetButton = () => {\n        this.setState({\n          mistake: 0,\n          guessed: new Set([]),\n          answer: randomWord()\n        });\n      }\n\n\n    render(){\n        const gameOver = this.state.mistake >= this.props.maxWrong;\n        let gameStat = this.generateButtons();\n        const isWinner = this.guessedWord().join(\"\") === this.state.answer;\n\n        if(isWinner) {\n            gameStat = 'YOU WON :)';\n        }\n        if(gameOver){\n            gameStat= 'YOU LOST :(';\n        }\n\n        return(\n            <div className=\"Hangman container\">\n                <h1 className=\"app_name\">HANG<p className=\"of_color\">-</p><p className=\"allowed_wrong_guess\">MAN</p></h1>\n                <div className=\"wrong_guess\">\n                    WRONG GUESSES: \n                    <div>\n                        <h1 className=\"current_wrong_guess\">{this.state.mistake}</h1>\n                        <h2 className=\"of_color\">                                    /                      </h2>\n                        <h1 className=\"allowed_wrong_guess\">{this.props.maxWrong}</h1>\n                    </div>\n                </div>\n                <div className=\"image_source\">\n                    <img src={this.props.images[this.state.mistake]} alt=\"\"/>\n                </div>\n                <div className=\"guess_language\">\n                    <div><p className=\"current_wrong_guess\">GUESS</p> <p className=\"of_color\">THE PROGRAMMING</p> <p className=\"allowed_wrong_guess\">LANGUAGE</p></div>\n                    <p>\n                        {!gameOver ? this.guessedWord() : this.state.answer }\n                    </p>\n                    <p className=\"of_color\">{gameStat}</p><br/><br/>\n                    <button className=\"ui red button\" onClick={this.resetButton}>RESET</button>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Hangman;","import React from 'react';\nimport Hangman from './components/Hangman'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hangman />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}